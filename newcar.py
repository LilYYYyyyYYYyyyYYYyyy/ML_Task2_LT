# This Code is Heavily Inspired By The YouTuber: Cheesy AI
# Code Changed, Optimized And Commented By: NeuralNine (Florian Dedov)
# This code has again been hoisted by the CGS Digital Innovation Department
# giving credit to the above authors for the benefit of our education in ML

import math
import random
import sys
import os

import neat
import pygame

# Constants
# WIDTH = 1600
# HEIGHT = 880

WIDTH = 1920
HEIGHT = 1080

CAR_SIZE_X = 60
CAR_SIZE_Y = 60

BORDER_COLOR = (255, 255, 255, 255)  # Color To Crash on Hit

current_generation = 0  # Generation counter
"""
The Car Class 

Throughout this section, you will need to explore each function
and provide extenive comments in the spaces denoted by the 
triple quotes(block quotes) """ """.
Your comments should describe each function and what it is doing, 
why it is necessary and where it is being used in the rest of the program.

"""


class Car:
    """ 1. This Function:
        This function uses the constructor method (__init__) to initialise the attributes of the object/instance in the class 'car'. The sprite attribute, which is the 2D
        representation of something on a screen, is set and loaded as the car.png image and scaled to the correct size. The car's other default attributes are also set to be used
        later on: 
        
        .position - sets the car's starting position in the correct spot on the road (black) so that it doesn’t start on the white and the machine has a chance to learn properly.
        .angle & .speed - sets the default values of the car’s initial angle and speed. Required for reasons similar to the position.
        .radars - the sensors to be listed and drawn for the car to look out for the borders (edge of the road/white) and steer itself accordingly
        .alive - A boolean to check if the car has crashed and end the simulation if it has
        .distance - Keeps track of the distance driven by the car. Set at 0
        .time - Keeps track of the time taken by the car. Set at 0.

        The centre of the car is calculated, taking into account the size of the car and the specified position in coordinates in order for it to be accurate. This enables the true
        position of the car and its sensors/radars to be used. 

        The class constructor is used to provide a base data frame for the cars, creating its attributes and components, which will be drawn up or generated by pygame and called upon
        in the rest of the code/algorithm.

    """

    def __init__(self):
        # Load Car Sprite and Rotate
        self.sprite = pygame.image.load("car.png").convert()  # Convert Speeds Up A Lot
        self.sprite = pygame.transform.scale(self.sprite, (CAR_SIZE_X, CAR_SIZE_Y))
        self.rotated_sprite = self.sprite

        # self.position = [690, 740] # Starting Position
        self.position = [830, 920]  # Starting Position
        self.angle = 0
        self.speed = 0

        self.speed_set = False  # Flag For Default Speed Later on

        self.center = [
            self.position[0] + CAR_SIZE_X / 2,
            self.position[1] + CAR_SIZE_Y / 2,
        ]  # Calculate Center

        self.radars = []  # List For Sensors / Radars
        self.drawing_radars = []  # Radars To Be Drawn

        self.alive = True  # Boolean To Check If Car is Crashed

        self.distance = 0  # Distance Driven
        self.time = 0  # Time Passed

    """ 2. This Function:
            This function draws the sprite on the screen using the .blit function in pygame. .blit stands for Block Transfer and is used in copying one surface’s contents to
            another. In this case, the ‘self.rotated_sprite’ or the car that was previously defined is drawn at the coordinates in self. position, which was also previously defined.
            This function is important because it allows people to see the car on the screen.

    """

    def draw(self, screen):
        screen.blit(self.rotated_sprite, self.position)  # Draw Sprite
        self.draw_radar(screen)  # OPTIONAL FOR SENSORS

    """ 3. This Function:
            This function draws all the sensors/radars by looping through the radars list and using the pygame.draw function. This function renders shapes to surfaces and, in this
            case, draws a line and circle from the car for each. These are used by the car to navigate around the race course by sensing where the edge of the road is (white and
            black colours).

    """

    def draw_radar(self, screen):
        # Optionally Draw All Sensors / Radars
        for radar in self.radars:
            position = radar[0]
            pygame.draw.line(screen, (0, 255, 0), self.center, position, 1)
            pygame.draw.circle(screen, (0, 255, 0), position, 5)

    """ 4. This Function:
            This function is an event handler that takes the car's corners and the game map to check if it has crashed. By looping through each corner of the car and assuming that
            the car is a rectangle for ease of programming. The coordinates of the game map at the coordinates of the corners are found and checked whether it is on the border
            colour. If this is true, then the self.alive attribute is set to false, and the car crashes. This function is necessary in the code because, without it, the cars would
            have no way of failing and could impact the efficiency and capability of a self-learning car. It will be used later on.
    """

    def check_collision(self, game_map):
        self.alive = True
        for point in self.corners:
            # If Any Corner Touches Border Color -> Crash
            # Assumes Rectangle
            if game_map.get_at((int(point[0]), int(point[1]))) == BORDER_COLOR:
                self.alive = False
                break

    """ 5. This Function:
            This function checks the radars by first initialising the value of length as 0, which will be used later on, and setting the x and y values. This is done by adding the
            x coordinate of the centre of the car and the cosine of the degree using the static methods, math.cos and math.radians. The same is done for the y value. The coordinates
            of the radar are then checked with the same coordinates on the game map. Using a while not loop, while the coordinates at x and y on the game map are not on the border
            colour and the length is less than 300, the length increases by one and the whole process of setting the x and y values is repeated for a different point on the radar.
            Finally, the distance of the car to the border is calculated using Pythagoras theorem and then appended to the radars list. This function uses the calculation of
            coordinates to ensure the distance between the car and the edge of the road is saved and used by the car in navigating itself around the course.
    """

    def check_radar(self, degree, game_map):
        length = 0
        x = int(
            self.center[0]
            + math.cos(math.radians(360 - (self.angle + degree))) * length
        )
        y = int(
            self.center[1]
            + math.sin(math.radians(360 - (self.angle + degree))) * length
        )

        # While We Don't Hit BORDER_COLOR AND length < 300 (just a max) -> go further and further
        while not game_map.get_at((x, y)) == BORDER_COLOR and length < 300:
            length = length + 1
            x = int(
                self.center[0]
                + math.cos(math.radians(360 - (self.angle + degree))) * length
            )
            y = int(
                self.center[1]
                + math.sin(math.radians(360 - (self.angle + degree))) * length
            )

        # Calculate Distance To Border And Append To Radars List
        dist = int(
            math.sqrt(math.pow(x - self.center[0], 2) + math.pow(y - self.center[1], 2))
        )
        self.radars.append([(x, y), dist])

    """ 6. This Function:
            This function first checks if the starting speed is set; if not, it is set to 20. The x coordinate of the car is then calculated according to the speed it is travelling
            at by adding its original position to the number of units it will have travelled by (its displacement) in the correct direction/angle. A maximum and minimum coordinate
            is set to make sure the car doesn’t drive more than 20 pixels towards the edge. This process is then repeated for the y coordinate of the car. The values of distance and
            time are also updated and increased. Thus, the car’s position has now changed and it has now moved to a different location on the track.

            As the car has now moved, its centre is now a different coordinate and needs to be recalculated. This is done using the same method in function 1 by using the coordinates
            of its position and the middle of the dimensions of the car. The coordinates of the four corners of the car are also calculated using trigonometry in the triangle that
            each of the corners of the car makes with the centre and half the length of the car. These are saved in a list. The previously defined check_collision function (function 4)
            is then called and the radars are cleared. The previously defined check_radar function (function 5) is then also called.

            Overall, this function is crucial in getting the car to move in a systematic and controlled manner by calculating the coordinates that it moves to and updating the other
            values that have been affected by its movement in order to perform other functions accurately.

    """

    def update(self, game_map):
        # Set The Speed To 20 For The First Time
        # Only When Having 4 Output Nodes With Speed Up and Down
        if not self.speed_set:
            self.speed = 20
            self.speed_set = True

        # Get Rotated Sprite And Move Into The Right X-Direction
        # Don't Let The Car Go Closer Than 20px To The Edge
        self.rotated_sprite = self.rotate_center(self.sprite, self.angle)
        self.position[0] += math.cos(math.radians(360 - self.angle)) * self.speed
        self.position[0] = max(self.position[0], 20)
        self.position[0] = min(self.position[0], WIDTH - 120)

        # Increase Distance and Time
        self.distance += self.speed
        self.time += 1

        # Same For Y-Position
        self.position[1] += math.sin(math.radians(360 - self.angle)) * self.speed
        self.position[1] = max(self.position[1], 20)
        self.position[1] = min(self.position[1], WIDTH - 120)

        # Calculate New Center
        self.center = [
            int(self.position[0]) + CAR_SIZE_X / 2,
            int(self.position[1]) + CAR_SIZE_Y / 2,
        ]

        # Calculate Four Corners
        # Length Is Half The Side
        length = 0.5 * CAR_SIZE_X
        left_top = [
            self.center[0] + math.cos(math.radians(360 - (self.angle + 30))) * length,
            self.center[1] + math.sin(math.radians(360 - (self.angle + 30))) * length,
        ]
        right_top = [
            self.center[0] + math.cos(math.radians(360 - (self.angle + 150))) * length,
            self.center[1] + math.sin(math.radians(360 - (self.angle + 150))) * length,
        ]
        left_bottom = [
            self.center[0] + math.cos(math.radians(360 - (self.angle + 210))) * length,
            self.center[1] + math.sin(math.radians(360 - (self.angle + 210))) * length,
        ]
        right_bottom = [
            self.center[0] + math.cos(math.radians(360 - (self.angle + 330))) * length,
            self.center[1] + math.sin(math.radians(360 - (self.angle + 330))) * length,
        ]
        self.corners = [left_top, right_top, left_bottom, right_bottom]

        # Check Collisions And Clear Radars
        self.check_collision(game_map)
        self.radars.clear()

        # From -90 To 120 With Step-Size 45 Check Radar
        for d in range(-90, 120, 45):
            self.check_radar(d, game_map)

    """ 7. This Function:
            This function retrieves the distances of the car to the border by looping through the radars list and returning a calculated value. This allows the car to improve its
            fitness and learn to stay in the middle of the road by deciding what action the car takes (left, right, speed up, speed down).

    """

    def get_data(self):
        # Get Distances To Border
        radars = self.radars
        return_values = [0, 0, 0, 0, 0]
        for i, radar in enumerate(radars):
            return_values[i] = int(radar[1] / 30)

        return return_values

    """ 8. This Function:
            This function is the basic alive function that returns the status of the car. This allows the checking of whether the car has crashed or not and, therefore, its fitness.
    """

    def is_alive(self):
        # Basic Alive Function
        return self.alive

    """ 9. This Function:
            This function provides the reward for the neural network as the distance the car has driven. This allows the car to work towards a higher reward and on increasing its
            fitness to further the distance driven.
    """

    def get_reward(self):
        # Calculate Reward (Maybe Change?)
        # return self.distance / 50.0
        return self.distance / (CAR_SIZE_X / 2)

    """ 10. This Function:
            This function rotates the invisible rectangle in the sprite. This allows the car to actually twist and turn itself around the course.
    """

    def rotate_center(self, image, angle):
        # Rotate The Rectangle
        rectangle = image.get_rect()
        rotated_image = pygame.transform.rotate(image, angle)
        rotated_rectangle = rectangle.copy()
        rotated_rectangle.center = rotated_image.get_rect().center
        rotated_image = rotated_image.subsurface(rotated_rectangle).copy()
        return rotated_image


""" 11. This Function:
        This function 

        1.  Empty Collections Initialization:
        nets: A list to hold neural networks corresponding to each genome.
        cars: A list to hold instances of the Car class that the neural networks control.
    
        2.  Initializing PyGame and Display:
        The Pygame library is initialized, and a display window is created with the specified dimensions.

        3.  Creating Neural Networks and Cars:
            For each genome passed into the run_simulation function:
            A neural network is created using the neat.nn.FeedForwardNetwork.create(g, config) method. The genome g and configuration config are used to create the network.
            The neural network is added to the nets list, and the genome's fitness is set to 0.
            A new instance of the Car class is created and added to the cars list.
        
        4.  Clock and Font Settings:
            A PyGame clock is created to control the frame rate of the simulation.
            Different fonts are loaded for displaying information on the screen.
        
        Updating the Generation Counter:
        
        The current_generation global variable is incremented, indicating the current generation being simulated.
        Main Simulation Loop:
        
        The loop runs indefinitely, simulating the behavior of each car and updating the neural networks based on their actions.
        Event Handling:
        
        PyGame events are processed within the loop.
        If the user closes the window or presses the escape key, the program exits.
        Car Actions and Neural Network Activation:
        
        For each car, the neural network is activated with the car's sensor data using nets[i].activate(car.get_data()).
        The highest value in the output of the neural network determines the car's action: left, right, slow down, or speed up.
        Updating Fitness and Car Movement:
        
        For each alive car, the car's fitness is increased, and its position and movement are updated based on its action.
        Checking Car Survival:
        
        The number of cars that are still alive is counted.
        If no cars are alive, the simulation loop is terminated.
        Time Limit for Simulation:
        
        A simple counter is used to roughly limit the duration of the simulation.
        Drawing the Game Environment:
        
        The game map is drawn on the screen.
        For each alive car, its image is drawn on the screen.
        Displaying Information:
        
        Text information about the current generation, number of cars alive, and mean fitness is displayed on the screen.
        Updating Display and Frame Rate:
        
        The display is updated with the drawn elements.
        The frame rate is controlled using the clock, ensuring a maximum of 60 frames per second.

"""


def run_simulation(genomes, config):
    # Empty Collections For Nets and Cars
    nets = []
    cars = []

    # Initialize PyGame And The Display
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT), pygame.FULLSCREEN)

    # For All Genomes Passed Create A New Neural Network
    for i, g in genomes:
        net = neat.nn.FeedForwardNetwork.create(g, config)
        nets.append(net)
        g.fitness = 0

        cars.append(Car())

    # Clock Settings
    # Font Settings & Loading Map
    clock = pygame.time.Clock()
    generation_font = pygame.font.SysFont("Arial", 30)
    alive_font = pygame.font.SysFont("Arial", 20)
    game_map = pygame.image.load("map.png").convert()  # Convert Speeds Up A Lot

    global current_generation
    current_generation += 1

    # Simple Counter To Roughly Limit Time (Not Good Practice)
    counter = 0

    while True:
        # Exit On Quit Event
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit(0)

        # For Each Car Get The Acton It Takes
        for i, car in enumerate(cars):
            output = nets[i].activate(car.get_data())
            choice = output.index(max(output))
            if choice == 0:
                car.angle += 10  # Left
            elif choice == 1:
                car.angle -= 10  # Right
            elif choice == 2:
                if car.speed - 2 >= 12:
                    car.speed -= 2  # Slow Down
            else:
                car.speed += 2  # Speed Up

        # Check If Car Is Still Alive
        # Increase Fitness If Yes And Break Loop If Not
        still_alive = 0
        for i, car in enumerate(cars):
            if car.is_alive():
                still_alive += 1
                car.update(game_map)
                genomes[i][1].fitness += car.get_reward()

        if still_alive == 0:
            break

        counter += 1
        if counter == 30 * 40:  # Stop After About 20 Seconds
            break

        # Draw Map And All Cars That Are Alive
        screen.blit(game_map, (0, 0))
        for car in cars:
            if car.is_alive():
                car.draw(screen)

        # Display Info
        text = generation_font.render(
            "Generation: " + str(current_generation), True, (0, 0, 0)
        )
        text_rect = text.get_rect()
        text_rect.center = (900, 450)
        screen.blit(text, text_rect)

        text = alive_font.render("Still Alive: " + str(still_alive), True, (0, 0, 0))
        text_rect = text.get_rect()
        text_rect.center = (900, 490)
        screen.blit(text, text_rect)

        pygame.display.flip()
        clock.tick(60)  # 60 FPS


""" 12. This Section: The program main section
        The if __name__ == "__main__": block ensures that the code within it 
        only executes when the script is run directly (not when imported as a module).
        
        The config.txt file settings are loaded into the config variable using Config()
            neat.DefaultGenome
                Various options that control genome node activation, aggregation, bias, 
                compatibility, connection management, feed-forward architecture, response, 
                and weight settings.
                num_hidden, num_inputs, num_outputs: 
                Specifies the number of hidden, input, and output nodes, respectively.
                These parameters collectively define the structure and characteristics 
                of the neural networks represented by the genomes.
                
            neat.DefaultReproduction
                elitism: Specifies the number of elite genomes that are directly passed 
                to the next generation.
                survival_threshold: Sets the survival threshold, indicating the proportion 
                of genomes in each species that are considered for reproduction.
                
            neat.DefaultSpeciesSet
                compatibility_threshold: Specifies the compatibility threshold used for 
                determining species separation. Genomes with compatibility distance below 
                this threshold belong to the same species.
                
            neat.DefaultStagnation
                species_fitness_func: Defines the function to use when determining species 
                fitness. In this case, 'max' indicates that the maximum fitness of a 
                species is used.
                max_stagnation: Specifies the maximum number of generations a species 
                can remain stagnant before it's considered for stagnation and possible 
                extinction.
                species_elitism: Specifies the number of elite genomes from each species 
                that are preserved to the next generation.
                
            config_path

"""
if __name__ == "__main__":
    # Load Config
    config_path = "./config.txt"
    config = neat.config.Config(
        neat.DefaultGenome,
        neat.DefaultReproduction,
        neat.DefaultSpeciesSet,
        neat.DefaultStagnation,
        config_path,
    )

    # Create Population And Add Reporters
    population = neat.Population(config)
    population.add_reporter(neat.StdOutReporter(True))
    stats = neat.StatisticsReporter()
    population.add_reporter(stats)

    # Run Simulation For A Maximum of 1000 Generations
    population.run(run_simulation, 1000)
